{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red0\green0\blue0;\red253\green128\blue8;
\red0\green0\blue0;\red191\green131\blue194;\red23\green30\blue45;\red193\green193\blue193;\red88\green196\blue193;
\red234\green121\blue57;\red109\green188\blue135;\red0\green0\blue0;\red174\green0\blue75;\red240\green241\blue244;
\red42\green49\blue64;\red255\green255\blue255;\red135\green135\blue135;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c0\c0\c3922;\cssrgb\c100000\c57637\c0;
\csgray\c0\c0;\cssrgb\c80000\c60000\c80392;\cssrgb\c11765\c16078\c23137;\cssrgb\c80000\c80000\c80000;\cssrgb\c40392\c80392\c80000;
\cssrgb\c94118\c55294\c28627;\cssrgb\c49412\c77647\c60000;\cssrgb\c0\c0\c0;\cssrgb\c74510\c9412\c36471;\cssrgb\c95294\c95686\c96471;
\cssrgb\c21569\c25490\c31765;\cssrgb\c100000\c100000\c100000;\cssrgb\c60000\c60000\c60000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid101\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid201\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid301\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid401\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid501\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid601\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww22500\viewh12640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs26 \cf0 EVERYTHING in ruby is an object\
4FOURfoefor data types\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}numbers (integers and floats\
{\listtext	2.	}strings\
{\listtext	3.	}symbols\
{\listtext	4.	}booleans (true, false, nil\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 USEFUL number methods built in ruby\
	#even?\
		6.even? #=> true\
		7.even? #=> false\
	#odd?\
		6.odd? #=> false\
		7.odd? #=> true\
Substrings : access strings inside strings\
	# example\
		\'93hello\'94[0] #=> \'93h\'94\
		\'93hello\'94[0, 4] #=> \'93hell\'94\
		\'93hello\'94[-1] #=> \'93o\'94\
THERE ARE MANY BUILT IN STRING METHODS, MANY\
	
\f1\b #include?\
		
\f0\b0 \'93hello\'94.include?(\'93lo\'94) #=> true\
		\'93hello\'94.include?(\'93z\'94) #=> false\
	
\f1\b #length
\f0\b0 \
		\'93hello\'94.length #=> 5 \
Basic Data Structures\
	
\f1\b array
\f0\b0  used to organize information into an ordered list.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs32 \AppleTypeServices\AppleTypeServicesF65539 \cf0 		Each element in an array can be accessed via an index. The indexes are numbered starting at zero
\fs26 \AppleTypeServices \
		array literal\
		[1, 2, 3, 4, 5]\
	
\f1\b hashes 
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \expnd0\expndtw0\kerning0
a dictionary, is a set of key-value pairs. Hash literals are represented with curly braces \AppleTypeServices \cb3 \{ \}\AppleTypeServices\AppleTypeServicesF65539 \cb1 . A key-value pair is an association where a key is assigned a 		   specific value. A hash consists of a key, usually represented by a symbol, that points to a value (denoted using a \AppleTypeServices \cb3 =>\AppleTypeServices\AppleTypeServicesF65539 \cb1 ) of any type of data\AppleTypeServices \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}List basic arithmetic operators and what they do\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	
\f1\b all typical math operators
\f0\b0 \
	# exponent example\
		2 ** 2 #=> 4\
		3 ** 4 #=> 81\
	#modulo example \
		8 % 2 #=>0  (8 / 2 = 4; no remainder)\
		10 % 4 #=> (10 / 4 = 2 with a remainder of 2)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}Describe difference between integer and float and how to convert between the two\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	
\f1\b Integers 
\f0\b0 are whole numbers\
	
\f1\b floats 
\f0\b0 are numbers that contain decimals\
	
\f1\b 		to convert\
		
\f0\b0 #integer to float 
\f1\b \
		
\f0\b0 13\cb4 .to_f\cb5  #=> 13.0\
		\
		#float to integer\
		13.0\cb4 .to_i\cb5  #=> 13\cb1 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}Explain string concatenation and interpolation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	#
\f1\b concatenation
\f0\b0  with plus operator\
		\'93Welcome \'93 + \'93to \'93 + \'93Odin!\'94 #=> \'93Welcome to Odin!\'94\
	#
\f1\b concatenation
\f0\b0  with shovel operator\
		\'93Welcome \'93 << \'93to \'93 <<  \'93Odin!\'94 #=> \'93Welcome to Odin!\'94	\
	
\f1\b interpolation
\f0\b0  allows you to evaluate a string that contains placeholder text\
		# interpolation example\
			name = \'93Odin\'94\
			\
			puts \'93Hello, #\{name\}\'94 #=> \'93Hello, Odin\'94\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}Describe what escape characters are and list examples\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	escape characters allow extra flexibility when using strings. Only allowed when used inside double quotations\
	# examples\
		\\\\ #=> need a backlash in your string\
		\\n #=> newline\
		\\s #=> space\
		\\\'94 #=> double quotation mark\
		\\\'92 #=> single quotation mark\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}Define what a symbol is and how diff from string\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	constants?\
	symbol are not duplicates?\
	# to create a symbol (add a colon in the beginning of a string\
		:my_symbol\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	
\f2 \uc0\u10003 
\f0 	}Explain all boolean results\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	true\
	false\
	nil #=> nothing\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Shorthand Assignment Operators
\f0\b0 	\
	* other mat h operators are similar, exchange symbol\
age = 18 \
age += 4 #=> 22\
\

\f1\b Variables
\f0\b0 \
Name should always be lowercase and use snake_case\
\

\f1\b Flow Control\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 if statement_to_be_evaluated == true\
	\'93# do something coool\'94\
end\
\
if 1 < 2\
	puts \'93Hot diggity, 1 is less than 2!\'94\
end\
	*ONE LINE IF*\
puts \'93Hot diggity damn, 1 is less than 2!\'94 If 1 < 2\
\
\pard\pardeftab720\partightenfactor0

\f3\fs32 \cf6 \cb7 \expnd0\expndtw0\kerning0
if\cf8  attack_by_land \cf9 ==\cf8  \cf10 true\cf8 \
  puts \cf11 "release the goat"\cf8 \
\cf6 elsif\cf8  attack_by_sea \cf9 ==\cf8  \cf10 true\cf8 \
  puts \cf11 "release the shark"\cf8 \
\cf6 else\cf8 \
  puts \cf11 "release Kevin the octopus"\cf8 \
\cf6 end\
\

\f0\fs26 \cb5 <=> spaceship operator\
	-1 if value on left is less then right\
         	 0 if value on left is equal to right\
	 1 if value on left is greater to right\
\

\f1\b \cf12 Logical Operators\
\pard\pardeftab720\sa480\partightenfactor0

\f0\b0 \cf13 \cb14 &&\cf15 \cb16  (and), \cf13 \cb14 ||\cf15 \cb16  (or) and \cf13 \cb14 !\cf15 \cb16  (not)\
Case Statements\
\pard\pardeftab720\partightenfactor0
\cf15 Unless Statesments\
	opposite of if\
\
Ternary Operator\
\pard\pardeftab720\partightenfactor0

\f3\fs32 \cf8 \cb7 age \cf9 =\cf8  \cf10 19\cf8 \
response \cf9 =\cf8  age \cf9 <\cf8  \cf10 18\cf8  \cf9 ?\cf8  \cf11 "You still have your entire life ahead of you."\cf8  \cf9 :\cf8  \cf11 "You're all grown up."\cf8 \
puts response \cf17 \cb7 #=> "You're all grown up."}